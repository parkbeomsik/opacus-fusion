import generate_kernel

def get_string(dtype, op_class, tb_shape, mma_shape, inst_shape, num_stages):

    kernel_name = generate_kernel.get_kernel_name(dtype, op_class, tb_shape, mma_shape, inst_shape, num_stages)
    
    if dtype == "float":
        element_input = "float"
        element_output = "float"
        element_compute = "float"
    elif dtype == "int":
        element_input = "int8_t"
        element_output = "float"
        element_compute = "int32_t"

    string = f"""
/*
    Generated by generate_cutlass_code.py - Do not edit.
*/

#include "cutlass/cutlass.h"
#include "cutlass/gemm/gemm.h"
#include "cutlass/conv/convolution.h"
#include "cutlass/conv/conv2d_problem_size.h"
#include "cutlass/conv/kernel/implicit_gemm_convolution_grouped.h"
#include "cutlass/conv/kernel/default_conv2d_wgrad.h"
#include "cutlass/conv/kernel/default_conv2d_wgrad_grouped.h"
#include "cutlass/conv/device/implicit_gemm_convolution_grouped.h"
#include "cutlass/conv/device/implicit_gemm_convolution.h"

////////////////////////////////////////////////////////////////////

int main() {{

  using {kernel_name} = typename cutlass::conv::kernel::DefaultConv2dWgradGrouped<
      {element_input}, 
      cutlass::layout::TensorNHWC,
      {element_input},
      cutlass::layout::TensorNHWC,
      {element_output}, cutlass::layout::TensorNHWC,
      {element_compute}, 
      cutlass::arch::{op_class}, 
      cutlass::arch::Sm80,
      cutlass::gemm::GemmShape<{tb_shape[0]}, {tb_shape[1]}, {tb_shape[2]}>,
      cutlass::gemm::GemmShape<{mma_shape[0]}, {mma_shape[1]}, {mma_shape[2]}>,
      cutlass::gemm::GemmShape<{inst_shape[0]}, {inst_shape[1]}, {inst_shape[2]}>,
      cutlass::epilogue::thread::LinearCombination<
          {element_output}, 1,
          {element_compute}, {element_output}>,
      cutlass::gemm::threadblock::GemmBatchedIdentityThreadblockSwizzle, 
      {num_stages},
      cutlass::arch::OpMultiplyAdd,
      cutlass::conv::IteratorAlgorithm::kOptimized
      >::Conv2dWgradKernel;

  using test = cutlass::conv::device::ImplicitGemmConvolutionGrouped<
      {kernel_name}>;

  return 0;

}}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
    """

    return string